# Enforce semantic pull request titles
# Example: "feat(api): [UNITY-1234] Add new user authentication endpoint"
titleOnly: true

# Validate PR title against the following types
types:
  - feature  # Example: "feature(ui): [UNITY-1235] Implement new Editor layout"
  - fix      # Example: "fix(database): [UNITY-1236] Resolve user data query issue"
  - docs     # Example: "docs(readme): [UNITY-1237] Update installation instructions"
  - style    # Example: "style(css): [UNITY-1238] Standardize button styles across the editor config window"
  - refactor # Example: "refactor(auth): [UNITY-1239] Simplify character importer process"
  - perf     # Example: "perf(queries): [UNITY-1240] Optimize database indexing for faster searches"
  - test     # Example: "test(api): [UNITY-1241] Add unit tests for API add work flow"
  - build    # Example: "build(deps): [UNITY-1242] Upgrade Unity to version to Unity 6"
  - ci       # Example: "ci(github-actions): [UNITY-1243] Add automated code linting"
  - chore    # Example: "chore(deps): [UNITY-1244] Improve character importer RPM dependencies"
  - revert   # Example: "revert: [UNITY-1245] Revert 'Add new feature X' due to stability issues"

# Require a scope to be provided
# Example: feature(api): [UNITY-1246] Add new endpoint for user preferences
requireScope: true

# Allow only lowercase letters in type and scope
# Example: "feat(api)" is valid, but "Feat(API)" is not
caseInsensitiveTypes: false

# Require a ticket number in the PR title
# Example: "feature(auth): [UNITY-1247] Implement two-factor authentication"
titleRegex: '^\s*(?<type>\w+)(?:\((?<scope>\w+)\))?\s*:\s*(?<ticket>\[UNITY-\d+\])\s+(?<description>.+)$'

# Validate all commits in addition to the PR title
# Ensures that each commit message follows the semantic format
validateSingleCommit: false

# Allow merge commits
# Example: "Merge branch 'feature/new-ui' into develop"
allowMergeCommits: true

# Allow revert commits
# Example: "Revert 'Add new feature X'"
allowRevert: true

# Require at least one conventional commit in the PR
# Ensures that at least one commit follows the semantic format
requireCommits: true

# Ignore certain branches
# Example: Commits directly to 'main' or 'develop' bypass these checks
ignoreBranches:
  - main
  - develop

# Custom error messages
errorMessages:
  invalidTitle: 'PR title must follow the format: type(scope): [UNITY-XXXX] Description'
  invalidType: 'Type must be one of the allowed types (e.g., feat, fix, docs)'
  missingScope: 'A scope is required in the PR title (e.g., feat(api):)'
  missingTicket: 'A UNITY ticket number is required in the PR title (e.g., [UNITY-1234])'